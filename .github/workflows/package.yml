name: CI for MCDR

on:
  push:
    paths:
      - ".github/**"
      - "mcdreforged/**"
      - "tests/**"
      - "docker/**"
      - "*.py"

env:
  IS_RELEASE: ${{ startsWith(github.ref, 'refs/tags/v') }}

jobs:
  test:
    uses: ./.github/workflows/test.yml

  assemble:
    needs: test
    uses: ./.github/workflows/assemble.yml

  pypi_upload:
    runs-on: ubuntu-latest
    name: Publish package to (Test)PyPI
    needs: test
    if: github.event_name == 'push'

    # https://docs.pypi.org/trusted-publishers/using-a-publisher/
    environment: pypi_release
    permissions:
      id-token: write

    steps:
    - uses: actions/checkout@v4
    - name: Setup python
      uses: actions/setup-python@v5
      with:
        python-version: 3.12

    - uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: "${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}"
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install -U pip
        pip install setuptools wheel

    - name: Modify and get version information
      id: version
      run: |
        version_file=mcdreforged/constants/core_constant.py
        if [ "$IS_RELEASE" != "true" ]; then
          sed -i "/^__CI_BUILD_NUM/c\__CI_BUILD_NUM = '$GITHUB_RUN_NUMBER'" "$version_file"
        fi
        
        python - <<EOF
        import os
        from mcdreforged.constants import core_constant as cc
        with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
          f.write('mcdr_version={}\n'.format(cc.VERSION))
          f.write('pypi_version={}\n'.format(cc.VERSION_PYPI))
        EOF

    - name: Create distribution
      run: |
        python setup.py sdist bdist_wheel

    - name: Check version consistency
      if: env.IS_RELEASE == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          // "refs/tags/v1.2.3" -> "1.2.3"
          const gitTag = process.env.GITHUB_REF.split('refs/tags/')[1] || ''
          const tagVersion = gitTag.replace(/^v/, '')
          
          const mcdrVersion = process.env.MCDR_VERSION
          const pypiVersion = process.env.PYPI_VERSION
          const isStableRelease = process.env.IS_RELEASE === 'true' && /^[0-9.]+$/.test(tagVersion)
          
          console.log(`tagVersion: ${tagVersion}`)
          console.log(`mcdrVersion: ${mcdrVersion}`)
          console.log(`pypiVersion: ${pypiVersion}`)
          console.log(`isStableRelease: ${isStableRelease}`)
          
          if (tagVersion !== mcdrVersion) {
            core.setFailed(`tagVersion ${tagVersion} != mcdrVersion ${mcdrVersion}`)
            return
          }
          if (isStableRelease && mcdrVersion !== pypiVersion) {
            core.setFailed(`mcdrVersion ${mcdrVersion} != pypiVersion ${pypiVersion}, and it's a stable release`)
            return
          }
      env:
        GITHUB_REF: ${{ github.ref }}
        MCDR_VERSION: ${{ steps.version.outputs.mcdr_version }}
        PYPI_VERSION: ${{ steps.version.outputs.pypi_version }}

    - name: Publish distribution to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        # Fix running the gh-action-pypi-publish action twice in one job causing an error on the 2nd run:
        # "InvalidDistribution: Unknown distribution format: 'mcdreforged-2.14.0a2-py3-none-any.whl.publish.attestation'"
        # See also:
        # https://github.com/pypa/gh-action-pypi-publish/issues/283
        # https://github.com/pypa/twine/commit/dd613569856f1dd128040f197948b5c48eb8dd43
        attestations: false

    - name: Publish distribution to PyPI
      if: env.IS_RELEASE == 'true'
      uses: pypa/gh-action-pypi-publish@release/v1

    - uses: actions/upload-artifact@v4
      with:
        name: MCDReforged package distribution for ${{ github.sha }}
        path: dist/

    - name: Report
      run: |
        version=${{ steps.version.outputs.pypi_version }}
        echo -e "## Version info\n" >> $GITHUB_STEP_SUMMARY
        echo -e "- MCDR version: \`${{ steps.version.outputs.mcdr_version }}\`" >> $GITHUB_STEP_SUMMARY
        echo -e "- PyPI version: \`${{ steps.version.outputs.pypi_version }}\`" >> $GITHUB_STEP_SUMMARY
        echo -e "" >> $GITHUB_STEP_SUMMARY
  
        echo -e "## PyPI package urls\n" >> $GITHUB_STEP_SUMMARY
        if [ "$IS_RELEASE" = "true" ]; then
          echo -e "### PyPI\n" >> $GITHUB_STEP_SUMMARY
          echo -e "https://pypi.org/project/mcdreforged/${version}/\n" >> $GITHUB_STEP_SUMMARY
          echo -e "\`\`\`\npip install mcdreforged==$version\n\`\`\`\n" >> $GITHUB_STEP_SUMMARY
        fi
        echo -e "### Test PyPI\n" >> $GITHUB_STEP_SUMMARY
        echo -e "https://test.pypi.org/project/mcdreforged/$version/\n" >> $GITHUB_STEP_SUMMARY
        echo -e "\`\`\`\npip install mcdreforged==$version -i https://test.pypi.org/simple\n\`\`\`\n" >> $GITHUB_STEP_SUMMARY

    outputs:
      mcdr_version: ${{ steps.version.outputs.mcdr_version }}
      pypi_version: ${{ steps.version.outputs.pypi_version }}

  image:
    name: Docker image (py${{ matrix.python }}${{ matrix.slim == 'true' && ', slim' || '' }})
    runs-on: ubuntu-latest
    needs: pypi_upload
    if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev'
    strategy:
      matrix:
        slim: ['false', 'true']
        python: ['3.11', '3.12', '3.13']  # last 3 minor versions

    steps:
    - uses: actions/checkout@v4

    - name: Prepare build config
      uses: actions/github-script@v7
      id: config
      with:
        script: |
          const version = process.env.VERSION
          const slim = process.env.SLIM
          const python = process.env.PYTHON
          const isRelease = process.env.IS_RELEASE === 'true'

          if (isRelease) {
            core.setOutput('pypi_simple', 'https://pypi.org/simple')
          } else {
            core.setOutput('pypi_simple', 'https://test.pypi.org/simple')
          }
          
          let metaTagsBase = [
            'type=ref,event=branch,suffix=',
            'type=semver,pattern={{version}},suffix=',
            'type=semver,pattern={{major}}.{{minor}},suffix=',
          ]
          let metaTagsLatest = []
          let suffixes = [`-py${python}`]  // will be appended at the end of all metaTagsBase

          if (python === '3.12') {  // 3.12 is the default python version
            suffixes.push('')  // add a no-python suffixes
            if (isRelease && /^[0-9.]+$/.test(version)) {  // stable release only
              metaTagsLatest.push('latest')
            }
          }
          let metaTagsAll = suffixes.flatMap(suffix => metaTagsBase.map(t => t + suffix)).concat(metaTagsLatest)
          console.log(`metaTagsAll 1: ${JSON.stringify(metaTagsAll)}`)
          
          if (slim === 'true') {
            core.setOutput('platforms', 'linux/amd64')
            core.setOutput('base_image_tag', `${python}-slim`)
            metaTagsAll = metaTagsAll.map(item => item + '-slim');
          } else {
            core.setOutput('platforms', 'linux/amd64,linux/arm64')
            core.setOutput('base_image_tag', python)
          }
          console.log(`suffixes: ${JSON.stringify(suffixes)}`)
          
          core.setOutput('tags', metaTagsAll.join('\n'))
          console.log(`metaTagsAll final: ${JSON.stringify(metaTagsAll)}`)
      env:
        VERSION: ${{ needs.pypi_upload.outputs.mcdr_version }}
        SLIM: ${{ matrix.slim }}
        PYTHON: ${{ matrix.python }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: fallenbreath
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: mcdreforged/mcdreforged
        tags: ${{ steps.config.outputs.tags }}
        flavor: latest=false

    - name: Patch docker meta
      uses: actions/github-script@v7
      id: meta_patched
      with:
        script: |-
          core.setOutput('tags', process.env.META_TAGS.replace(/\n/g, '\\n'))
          core.setOutput('labels', process.env.META_LABELS.replace(/\n/g, '\\n'))
      env:
        META_TAGS: ${{ steps.meta.outputs.tags }}
        META_LABELS: ${{ steps.meta.outputs.labels }}

    - uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python }}
    - name: Wait for PyPI index update
      run: |
        start_time=$(date +%s)
        pip_cmd="pip3 install mcdreforged==${VERSION} -i ${PYPI_SIMPLE} --dry-run --ignore-installed --no-deps --no-cache-dir"
        echo pip_cmd=$pip_cmd
        while true; do
          if $pip_cmd; then
            echo "Version ${VERSION} exists on ${PYPI_SIMPLE}, exit"
            break
          else
            current_time=$(date +%s)
            elapsed_time=$((current_time - start_time))
            if [ "$elapsed_time" -ge 600 ]; then
              echo "Failed to find package version ${VERSION} on ${PYPI_SIMPLE} after 10 minutes"
              exit 1
            fi
            echo "Version ${VERSION} not exist on ${PYPI_SIMPLE}. Checking again in 5 seconds"
            sleep 5
          fi
        done
      env:
        VERSION: ${{ needs.pypi_upload.outputs.pypi_version }}
        PYPI_SIMPLE: ${{ steps.config.outputs.pypi_simple }}

    - name: Build and push
      id: build
      uses: Wandalen/wretry.action@master
      with:
        action: docker/build-push-action@v5
        with: |
          platforms: ${{ steps.config.outputs.platforms }}
          push: true
          file: docker/Dockerfile
          context: docker
          tags: "${{ steps.meta_patched.outputs.tags }}"
          labels: "${{ steps.meta_patched.outputs.labels }}"
          build-args: |
            BASE_IMAGE_TAG=${{ steps.config.outputs.base_image_tag }}
            MCDR_VERSION_REQUIREMENT=${{ needs.pypi_upload.outputs.pypi_version }}
            PYPI_INDEX=${{ steps.config.outputs.pypi_simple }}
        attempt_limit: 3
        attempt_delay: 10

    - name: Report image build information
      run: |
        echo -e "### Build args\n" >> $GITHUB_STEP_SUMMARY
        echo -e "- BASE_IMAGE_TAG: \`${{ steps.config.outputs.base_image_tag }}\`" >> $GITHUB_STEP_SUMMARY
        echo -e "- MCDR_VERSION_REQUIREMENT: \`${{ needs.pypi_upload.outputs.pypi_version }}\`" >> $GITHUB_STEP_SUMMARY
        echo -e "- PYPI_INDEX: \`${{ steps.config.outputs.pypi_simple }}\`" >> $GITHUB_STEP_SUMMARY
        echo -e "" >> $GITHUB_STEP_SUMMARY
        
        echo -e "### Image tags\n" >> $GITHUB_STEP_SUMMARY
        echo -e "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo -e "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
        echo -e "\`\`\`" >> $GITHUB_STEP_SUMMARY

    - name: Prepare extended image build workflow arguments
      uses: actions/github-script@v7
      id: dispatch_args
      with:
        script: |-
          let tags = process.env.TAGS.trim().
              split('\n').
              map(t => t.substring(t.lastIndexOf(':') + 1)).
              join(',')
          const payload = {
            'base_image_tags': tags,
            'digest': process.env.DIGEST,
            'git_ref': process.env.GITHUB_REF,
            'run_number': process.env.GITHUB_RUN_NUMBER,
          }
          console.log('payload:', payload)
          core.setOutput('payload', JSON.stringify(payload))
      env:
        TAGS: ${{ steps.meta.outputs.tags }}
        DIGEST: ${{ fromJSON( steps.build.outputs.outputs ).digest }}

    - name: Trigger extended image builds
      if: startsWith(github.ref, 'refs/tags/v')
      uses: peter-evans/repository-dispatch@v3
      with:
        token: ${{ secrets.REPOSITORY_DISPATCH_PAT }}
        repository: MCDReforged/docker
        event-type: trigger-workflow
        client-payload: ${{ steps.dispatch_args.outputs.payload }}
